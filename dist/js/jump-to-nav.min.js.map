{"version":3,"sources":["jump-to-nav.js"],"names":["jumpToSections","document","querySelectorAll","length","scriptLinkage","getElementById","activeSections","smoothScroll","topLocation","heading","zIndex","nest","css","urlParam","URLSearchParams","getAttribute","split","get","embeddedStyleTag","createElement","setAttribute","jumpToCSS","textContent","head","appendChild","navWrapperEl","classList","add","HTML","innerHTML","body","style","top","querySelector","navItem","navList","forEach","item","index","hasAttribute","linkID","linkListItem","options","title","semiColonSplit","splitOn","optionString","undefined","trim","linkATag","parentElement","closest","parentListItem","childUl","parentNode","lastChild","addEventListener","event","documentElement","setTimeout","remove","el","panelHeader","panelBody","parseInt","getBoundingClientRect","jumpToHeaderHeight","offsetHeight","maxHeight","setMaxHeight","sectionsEl","navEl","observer","IntersectionObserver","items","isIntersecting","target","root","threshold","rootMargin","section","observe","activeSection"],"mappings":"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","sourcesContent":["/*!\n    * Jump to navigation v1.1.2\n    * Need description.\n    *\n    * Copyright 2022 Marshall Crosby\n    * https://marshallcrosby.com\n*/\n\n\n/* ------------------------------------------------------------------------------\n    **TODO:\n    1. Query params\n        ✓ • Allow custom Y location\n        ✓ • Make nesting an option\n        ✓ • Allow custom z-index\n        ✓ • Allow external css\n        • Placement (left, right, top, bottom)\n    ✓ 2. Click outside closes panel\n    ✓ 3. CSS dynamic max-height\n    ✓ 4. Focus nav item on current section in view\n    5. Add static site navigation\n    ✓ 6. Dynamic IDs if none\n    7. Better verbiage/names\n-------------------------------------------------------------------------------- */\n\n\nconst jumpToSections = document.querySelectorAll('[data-jtn-anchor]');\n\n(function () {\n    \"use strict\"\n\n    if (jumpToSections.length > 0) {\n\n        /* --------------------------------------------------------------------------\n            Query params\n        ---------------------------------------------------------------------------- */\n    \n        let scriptLinkage = document.getElementById('jump-to-nav-js');\n        let activeSections = null;\n        let smoothScroll = null;\n        let topLocation = null;\n        let heading = null;\n        let zIndex = null;\n        let nest = null;\n        let css = null;\n    \n        if (scriptLinkage) {\n            const urlParam = new URLSearchParams(scriptLinkage.getAttribute('src').split('?')[1]);\n            \n            activeSections = urlParam.get('active-section');\n            smoothScroll = urlParam.get('smooth');\n            topLocation = urlParam.get('top');\n            heading = urlParam.get('heading');\n            zIndex = urlParam.get('z-index');\n            nest = urlParam.get('nest');\n            css = urlParam.get('css');\n        }\n    \n    \n        /* --------------------------------------------------------------------------\n            Render nav css\n        ---------------------------------------------------------------------------- */\n    \n        if (css !== 'external') {\n            const embeddedStyleTag = document.createElement('style');\n            embeddedStyleTag.setAttribute('id', 'jumpToNavStyle');\n        \n            const jumpToCSS = `//import jump-to-nav.css`;\n        \n            // Apply in page styles to style tag\n            embeddedStyleTag.textContent = jumpToCSS;\n        \n            // Add in page styles to head\n            document.head.appendChild(embeddedStyleTag);\n        }\n    \n    \n        /* --------------------------------------------------------------------------\n            Create navigation element and populate it\n        ---------------------------------------------------------------------------- */\n        \n        //\n        // Render nav elements\n        //\n    \n        const navWrapperEl = document.createElement('div');\n        navWrapperEl.classList.add('jump-to-nav-wrapper');\n    \n        const HTML = `//import _jump-to-nav.html`;\n        navWrapperEl.innerHTML = HTML;\n        document.body.appendChild(navWrapperEl);\n\n        if (topLocation !== null) {\n            navWrapperEl.style.top = topLocation;\n        }\n        \n        if (zIndex !== null) {\n            navWrapperEl.style.zIndex = zIndex;\n        }\n\n\n        //\n        // Set custom heading if param is set\n        //\n\n        if (heading !== null) {\n            const headingEl = navWrapperEl.querySelector('.jump-to-nav__heading');\n\n            headingEl.textContent = heading;\n        }\n    \n    \n        //\n        // Setup elements and add li and links\n        //\n    \n        const navItem = document.querySelector('.jump-to-nav__nav');\n        const navList = document.createElement('ul');\n        navList.classList.add('jump-to-nav__list');\n    \n        navItem.appendChild(navList);\n    \n        // let searchTermsArray = [];\n        \n        jumpToSections.forEach((item, index) => {\n            \n            // Assign id if none is found\n            if (!item.hasAttribute('id')) {\n                item.setAttribute('id', 'jumpToSection' + index);\n            }\n\n            const linkID = item.getAttribute('id');\n            const linkListItem = document.createElement('li');\n            let options = null;\n            \n            linkListItem.classList.add('jump-to-nav__item');\n            linkListItem.setAttribute('data-jump-id', linkID);\n    \n            options = {\n                title: null\n            };\n    \n            if (item.getAttribute('data-jtn-anchor') !== '') {\n                const semiColonSplit = item.getAttribute('data-jtn-anchor').split(';');\n                \n                // Assign option values if any\n                semiColonSplit.forEach(function (item, index) {\n                    if (semiColonSplit[index].split('title:')[1] !== undefined) {\n                        options.title = parseOption(semiColonSplit[index], 'title');\n                    }\n                });          \n            }\n    \n            const linkTitleText = (options.title !== null) ? options.title : linkID;\n            const linkATag = `\n                <a class=\"jump-to-nav__link\" href=\"#${ linkID }\">${ linkTitleText }</a>\n            `;\n    \n            linkListItem.innerHTML = linkATag;\n    \n            navList.appendChild(linkListItem);\n    \n            if (item.parentElement.closest('[data-jtn-anchor]')) {\n                let parentListItem = item.parentElement.closest('[data-jtn-anchor]');\n                parentListItem.setAttribute('data-jump-has-child', 'true');\n                linkListItem.setAttribute('data-jump-parent', parentListItem.getAttribute('id'));    \n            }\n    \n            // let searchTermsObj = {};\n            // searchTermsObj['title'] = linkTitleText;\n            // searchTermsObj['id'] = linkID;\n            // searchTermsArray.push(searchTermsObj);\n        });\n    \n    \n        //\n        // Nest li(s) if jumpToSections is nested\n        //\n    \n        if (nest !== null) {\n            const linkChildren = navItem.querySelectorAll('[data-jump-parent]');\n    \n            linkChildren.forEach((item, index) => {\n                const parentItem = navItem.querySelector('[data-jump-id=\"' + item.getAttribute('data-jump-parent') + '\"]');\n        \n                parentItem.appendChild(item);\n            });\n        \n        \n            //\n            // Add ul inside items with children\n            //\n            \n            const nestedChildren = navItem.querySelectorAll('[data-jump-id]');\n            \n            nestedChildren.forEach((item, index) => {\n                if (item.querySelector('[data-jump-parent]')) {\n                    var childUl = document.createElement('ul');\n                    childUl.classList.add('jump-to-nav__nested-list')\n                    item.appendChild(childUl);\n                }\n            });\n        \n        \n            //\n            // Move unwrapped list items into ul\n            //\n        \n            const unwrapListItems = navItem.querySelectorAll('[data-jump-id] > [data-jump-id]');\n        \n            unwrapListItems.forEach((item, index) => {\n                const siblingUl = item.parentNode.lastChild;\n        \n                siblingUl.appendChild(item);\n            });\n        }\n    \n    \n        //\n        // Add smooth scroll when using jump to nav\n        //\n    \n        if (smoothScroll !== null) {\n            const navAnchor = navItem.querySelectorAll('.jump-to-nav__item > a');\n    \n            navAnchor.forEach((item, index) => {\n                item.addEventListener('click', function (event) {\n                    document.documentElement.classList.add('js-jump-to-nav-smooth-scroll');\n                    \n                    setTimeout(() => {\n                        document.documentElement.classList.remove('js-jump-to-nav-smooth-scroll');\n                    }, 400);\n                });\n            });\n        }\n    \n    \n        //\n        // Maximize / minimize buttons\n        //\n    \n        const maximizeButton = navWrapperEl.querySelector('.jump-to-nav__maximize');\n    \n        maximizeButton.addEventListener('click', function () {\n            navWrapperEl.classList.add('jump-to-nav-wrapper--showing');\n        });\n    \n        const minimizeButton = navWrapperEl.querySelector('.jump-to-nav__minimize');\n    \n        minimizeButton.addEventListener('click', function () {\n            navWrapperEl.classList.remove('jump-to-nav-wrapper--showing');\n        });\n    \n        // //=require partials/_click-outside.js\n       \n        // Run max height function\n        setMaxHeight(navWrapperEl);\n\n        // Run active section function\n        if (activeSections !== null) {\n            activeSection('[data-jtn-anchor]', '.jump-to-nav-wrapper');\n        }\n    }\n\n    /* --------------------------------------------------------------------------\n        Functions\n    ---------------------------------------------------------------------------- */\n\n    //\n    // Parse options (function)\n    //\n\n    function parseOption(splitOn, optionString) {\n        return splitOn.split(optionString + ':')[1].trim();\n    }\n\n\n    //\n    // Set height for overflow scrolling if needed\n    //\n\n    function setMaxHeight(el) {\n        const panelHeader = document.querySelector('.jump-to-nav__header');\n        const panelBody = document.querySelector('.jump-to-nav__body');\n        const topLocation = parseInt(el.getBoundingClientRect().top);\n        const jumpToHeaderHeight = parseInt(panelHeader.offsetHeight);\n        const maxHeight = (topLocation + jumpToHeaderHeight) + 60;\n\n        panelBody.style.maxHeight = 'calc(100vh - ' + maxHeight + 'px)';\n    }\n\n\n    //\n    // Set active class on nav item if section is in view\n    //\n\n    function activeSection(sectionsEl, navEl) {\n        const jumpToSections = document.querySelectorAll(sectionsEl);\n        const navItem = document.querySelector(navEl);\n        const options = {\n            root: null,\n            threshold: .3,\n            rootMargin: '-20px'\n        }\n        \n        const observer = new IntersectionObserver( (items, observer) => {\n            items.forEach(item => {\n                if (item.isIntersecting) {\n                    navItem.querySelector('[data-jump-id=\"' + item.target.getAttribute('id') + '\"]').classList.add('jump-to-nav__item--active');\n                } else {\n                    navItem.querySelector('[data-jump-id=\"' + item.target.getAttribute('id') + '\"]').classList.remove('jump-to-nav__item--active');\n                }\n            })\n        }, options);\n        \n        jumpToSections.forEach(section => {\n            observer.observe(section);\n        });\n    }\n})();"]}